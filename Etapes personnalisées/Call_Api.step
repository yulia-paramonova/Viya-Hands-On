{"creationTimeStamp":"2023-10-30T14:26:29.566Z","modifiedTimeStamp":"2023-10-30T14:26:29.566Z","createdBy":"Ayoub.LamraniAlaoui@sas.com","modifiedBy":"Ayoub.LamraniAlaoui@sas.com","name":"Call_Api.step","displayName":"Call_Api.step","localDisplayName":"Call_Api.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","uri":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","uri":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","uri":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","uri":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","uri":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","uri":"/dataFlows/steps/768291c9-c1ea-407f-a214-c8ae8bd78812","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Page 1\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"list1\",\n\t\t\t\t\t\"type\": \"list\",\n\t\t\t\t\t\"label\": \"API\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Température quotidienne régionale\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Température quotidienne départementale\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Rayonnement solaire et vitesse du vent\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Bornes de recharge pour véhicules éléctriques\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Prix carburants\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Nombre de retraites\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"max\": 5,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"checkbox1\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Get all the dataset \",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputfield1\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Year\",\n\t\t\t\t\t\"placeholder\": \"2023\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"list1\": [],\n\t\t\"checkbox1\": false,\n\t\t\"inputfield1\": \"\"\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\nproc python;\nsubmit;\n\nimport pandas as pd\nimport requests\nfrom datetime import datetime\n\ntoday = datetime.today().strftime('%Y-%M')\ncount = int(SAS.symget(\"list1_count\"))\nyear = SAS.symget(\"inputfield1\")\nyear  = int(year) if year != '' else 2023\nall = SAS.symget(\"checkbox1\")\nprint(all)\nprint(year)\nheaders = {\n    'Accept': 'application/json, text/plain, */*'\n}\nparams = {\n    'type': 'main',\n    'page_size': '1000',\n    'q': '',\n}\n\ncol_to_keep = {\n\"Prix carburants\" : ['cp', 'pop', 'adresse', 'ville', 'horaires', 'rupture',\n       'fermeture', 'geom', 'prix_maj', 'prix_id', 'prix_valeur', 'prix_nom',\n       'com_arm_code', 'com_arm_name', 'epci_code', 'epci_name', 'dep_code',\n       'dep_name', 'reg_code', 'reg_name', 'services_service', 'rupture_nom',\n       'rupture_debut', 'rupture_fin'],\n\n\"Rayonnement solaire et vitesse du vent\" : ['date', 'code_insee_region', 'region', 'uv100', 'ssrd03h'],\n\n\"Température quotidienne régionale\" : ['date', 'code_insee_region', 'region', 'tmin', 'tmax', 'tmoy'],\n\n\"Température quotidienne départementale\": ['date_obs', 'code_insee_departement', 'departement', 'tmin', 'tmax','tmoy'],\n\n\"Bornes de recharge pour véhicules éléctriques\" : ['nom_amenageur', 'siren_amenageur', 'contact_amenageur',\n       'nom_operateur', 'contact_operateur',\n       'nom_enseigne','nom_station', 'implantation_station', 'adresse_station',\n       'code_insee_commune', 'coordonneesXY', 'nbre_pdc', 'id_pdc_itinerance',\n       'id_pdc_local', 'puissance_nominale', 'prise_type_ef', 'prise_type_2',\n       'prise_type_combo_ccs', 'prise_type_chademo', 'prise_type_autre',\n       'gratuit', 'paiement_acte', 'paiement_cb', 'paiement_autre',\n       'tarification', 'condition_acces', 'reservation', 'horaires',\n       'accessibilite_pmr', 'restriction_gabarit', 'station_deux_roues',\n       'raccordement', 'num_pdl', 'date_mise_en_service', 'observations',\n       'date_maj', 'cable_t2_attache', 'last_modified'],\n\"Nombre de retraites\" : ['annees','nombre_de_retraites', 'sexe']\n}\n\nmap_id_api = {\n\"Température quotidienne régionale\" : '5a5ddc1ab5950825e3ecba32',\n\"Température quotidienne départementale\":'5eb236728ad018f2f0fe1b9e',\n\"Rayonnement solaire et vitesse du vent\": '5b18c802b59508682cf1ace8',\n\"Bornes de recharge pour véhicules éléctriques\" : '5448d3e0c751df01f85d0572',\n\"Prix carburants\" :'62a89480810a1bc9d39973c2'\n}\n\nmap_api = {\n\"Température quotidienne régionale\" : \"https://odre.opendatasoft.com/api/records/1.0/search/?dataset=temperature-quotidienne-regionale&q=&rows=10000&sort=date&facet=date&facet=region&refine.date=\",\n\"Température quotidienne départementale\" : \"https://odre.opendatasoft.com/api/records/1.0/search/?dataset=temperature-quotidienne-departementale&q=&rows=10000&sort=date_obs&&facet=date_obs&facet=departement&refine.date_obs=\",\n\"Rayonnement solaire et vitesse du vent\" : \"https://odre.opendatasoft.com/api/records/1.0/search/?dataset=rayonnement-solaire-vitesse-vent-tri-horaires-regionaux&rows=10000&q=&sort=date&facet=date&facet=region&refine.date=\",\n\"Bornes de recharge pour véhicules éléctriques\" : \"https://odre.opendatasoft.com/api/records/1.0/search/?dataset=fichier-consolide-des-bornes-de-recharge-pour-vehicules-electriques-irve&q=&sort=date_maj&facet=region&rows=10000&facet=departement&refine.date_maj=\",\n\"Prix carburants\" : \"https://data.opendatasoft.com/api/records/1.0/search/?dataset=prix-carburants-fichier-instantane-test-ods-copie%40opendatamef&q=&rows=10000&facet=adresse&facet=ville&facet=prix_maj&facet=prix_nom&facet=epci_name&facet=dep_name&facet=reg_name&facet=services_service&refine.prix_maj=\",\n\"Nombre de retraites\" : \"https://data.cnav.fr/api/records/1.0/search/?dataset=nombre-de-retraites-au-31-decembre-par-genre&q=&rows=-1&facet=annees&facet=sexe\"\n}\n\nmap_tab = {\n\"Température quotidienne régionale\" : \"Temperature_regionale_\", \n\"Température quotidienne départementale\" : \"Temperature_departementale_\",\n\"Rayonnement solaire et vitesse du vent\" : \"R_solaire_v_vent_\",\n\"Bornes de recharge pour véhicules éléctriques\" : \"Bornes_ve_\",\n\"Prix carburants\" : \"Prix_carburants_\",\n\"Nombre de retraites\" : \"Nombre_de_retraites\"\n}\n\ndef export_df(json_result, to_call):        \n\tdf = pd.json_normalize(json_result.json()[\"records\"]).filter(regex=r'^fields\\.', axis=1)\n\tprint(f'''Api {to_call} : {len(df)} rows imported''')\n\tdf.columns = df.columns.str.replace('fields.', '', regex=False)\n\tSAS.df2sd(df[col_to_keep[to_call]],'casuser.'+ map_tab[to_call])\n\ndef get_all(to_call):\n\tresponse = requests.get(f'''https://www.data.gouv.fr/api/2/datasets/{map_id_api[to_call]}/resources/''', params=params, headers=headers).json()\n\turl_link = response[\"data\"][0][\"latest\"]\n\tif to_call == \"Bornes de recharge pour véhicules éléctriques\":\n\t\tdf = pd.read_csv(url_link, sep=\",\")\n\telse:\n\t\tdf = pd.read_csv(url_link, sep=\";\")\n\tprint(f'''Api {to_call} : {len(df)} rows imported''')\n\tSAS.df2sd(df[col_to_keep[to_call]],'opendata.'+ map_tab[to_call])\n\n\nfor i in range(count):\n\tto_call = SAS.symget(\"list1_\"+str(i+1))\n\tif all=='1':\n\t\tget_all(to_call)\n\telse:\n\t\texport_df(requests.get(f'''{map_api[to_call]}{year}'''), to_call)\nendsubmit;\n\nrun;"}}